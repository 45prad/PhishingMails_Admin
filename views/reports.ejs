<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Emails</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>

<body class="bg-gray-100">
    <%- include('partials/navbar.ejs'); %>
    
    <div class="max-w-3xl mx-auto bg-white rounded-lg shadow-md p-6 mt-12">
        <div class="flex flex-row justify-end mb-8">
            <div class="flex flex-row">
                <button class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
                    title="Create Users using Excel" onclick="openModal('uploadModal')">
                    <i class="fa-solid fa-file-arrow-up"></i>
                    Upload Excel
                </button>
                <!-- Button to open modal -->
                <i class="fa-solid fa-user-plus bg-blue-500 hover:bg-blue-600 text-white font-bold p-2 rounded mx-4 flex items-center justify-center py-4"
                    onclick="openModal('modal')" title="Add User"></i>
                <i class="fa-regular fa-calendar-plus bg-blue-500 hover:bg-blue-600 text-white font-bold p-2 rounded flex items-center justify-center py-4"
                    onclick="openModal('createCampaignModal')" title="Create Campaign"></i>

            </div>
        </div>

        <!-- Modal -->
        <div id="modal"
            class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center items-center hidden">
            <div class="bg-white rounded-lg p-6">
                <p class="bg-red-500" id="modalError"></p>
                <h2 class="text-2xl font-bold mb-4">Add User</h2>
                <input type="text" id="emailId" class="w-full border rounded px-3 py-2 mb-4"
                    placeholder="Email Address">

                <!-- Dropdown for Campaign ID -->
                <select id="campaignIdForCreateUser" class="w-full border rounded px-3 py-2 mb-4"
                    name="campaignDropdown"></select>

                <button onclick="addUser()" class="bg-blue-500 text-white px-4 py-2 rounded">Add</button>
                <button onclick="closeModal('modal')"
                    class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Cancel</button>
            </div>
        </div>

        <div id="createCampaignModal" class="fixed top-0 left-0 w-full h-full bg-gray-800 bg-opacity-50 flex justify-center items-center hidden">
            <div class="bg-white rounded-lg p-6">
                <h2 class="text-2xl font-bold mb-4">Create Campaign</h2>
                <input type="text" id="createCampaignName" class="w-full border rounded px-3 py-2 mb-4" placeholder="Campaign Name">
        
                <p id="campaignError" class="text-red-500"></p> <!-- Error message container -->
        
                <button onclick="submitCampaign()" class="bg-blue-500 text-white px-4 py-2 rounded">Create Campaign</button>
                <button onclick="closeModal('createCampaignModal')" class="bg-gray-500 text-white px-4 py-2 rounded ml-2">Cancel</button>
            </div>
        </div>
        
        <!-- Send Bulk Emails Modal -->
        <div id="emailModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex justify-center items-center">
            <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-lg">
                <h2 class="text-xl font-bold mb-4">Send Email</h2>
                <form id="emailForm" class="space-y-4">
                    <div>
                        <label for="subject" class="block text-gray-700 font-semibold">Subject</label>
                        <input type="text" id="subject" name="subject"
                            class="w-full px-4 py-2 border rounded-lg focus:outline-none">
                    </div>
                    <div>
                        <label for="message" class="block text-gray-700 font-semibold">Message</label>
                        <textarea id="message" name="message" rows="4"
                            class="w-full px-4 py-2 border rounded-lg focus:outline-none"></textarea>
                    </div>
                    <div class="text-center">
                        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md">
                            Send
                        </button>
                        <button type="button" id="closeModalBtn"
                            class="ml-4 bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal for Create User using UploadFunction -->
        <div id="uploadModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
            <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-xl font-bold">Upload Excel</h2>
                </div>

                <form id="uploadForm" enctype="multipart/form-data">
                    <p class="text-red-500 mb-4">** Upload Excel with emails in the first column **</p>
                    <div class="mb-4">
                        <label for="campaignIdForUpload" class="block text-gray-700 mb-2">Select Campaign</label>
                        <select id="campaignIdForUpload" name="campaignDropdown"
                            class="w-full border border-gray-300 rounded p-2" required>
                            <!-- Campaign options will be populated here -->
                        </select>
                    </div>

                    <div class="mb-4">
                        <input type="file" name="file" accept=".xlsx, .xls" class="w-full text-gray-600" required>
                    </div>

                    <div class="flex justify-end">
                        <button type="button" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded mr-2"
                            onclick="closeModal('uploadModal')">Cancel</button>
                        <button type="submit"
                            class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">Upload</button>
                    </div>
                </form>
            </div>
        </div>
        

        <div class="overflow-x-auto">
            <div class="flex flex-row items-center justify-between my-4 w-full">
                <div class="flex-grow flex flex-row justify-start items-center space-x-2 text-2xl text-indigo-500" id="campaignName">
                    Campaign users...
                </div>
                <select class="p-2 border border-2 border-green-400 outline-none rounded ml-auto" 
                    id="campaignIdForFilterUsers" name="campaignDropdown" onchange="fetchUserEmails()">
                </select>
            </div>
            

            <p id="message" class=""></p>
            <table class="w-full table-auto">
                <thead>
                    <tr>
                        <th class="border px-4 py-2">#</th>
                        <th class="border px-4 py-2">User ID</th>
                        <th class="border px-4 py-2">Email</th>
                        <th class="border px-4 py-2">Reported Spam</th>
                    </tr>
                </thead>
                <tbody id="userList">
                    <tr>
                        <td colspan="4" class="text-center py-4 text-gray-500">
                            Please select a campaign to see the list of emails.
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        // Function to fetch users' emails from the server
        // Store the fetched users globally to make searching easier
        let allUsers = [];

        async function fetchUserEmails() {
            const campaignName = document.getElementById('campaignName');
            const campaignId = document.getElementById('campaignIdForFilterUsers').value;
            const userListBody = document.getElementById('userList');

            if (!campaignId) {
                userListBody.innerHTML = '<tr><td colspan="4" class="text-center py-4 text-gray-500">Please select a campaign to see the list of emails.</td></tr>';
                campaignName.innerText = 'Campaign Users...';
                return;
            }

            // Show loading state while fetching data
            userListBody.innerHTML = '<tr><td colspan="4" class="text-center py-4">Loading emails...</td></tr>';

            try {
                const response = await fetch(`/users-emails/${campaignId}`);

                if (!response.ok) {
                    throw new Error(`Error: ${response.statusText}`);
                }
                const users = await response.json();
                allUsers = users.users;

                if (users.length === 0) {
                    userListBody.innerHTML =
                        `<tr>
                            <td colspan="4" class="text-center py-4 text-gray-500">
                                No users found for this campaign.
                            </td>
                        </tr>`;
                } else {
                    displayUsers(users.users);
                    campaignName.innerHTML = `
                            <p class="text-xl font-bold text-indigo-500 underline ">${users.campaignName}</p> 
                            <input type="text" id="searchInput" class="border px-4 py-2 rounded w-full outline-none border border-2 border-green-400" placeholder="Search by email..." onkeyup="filterUsers()">
                            <i id="bulkCampaignId" data-campaign-id="${campaignId}" onclick="openModal('emailModal')" class="fa-solid fa-paper-plane text-green-500 ps-4" title="Send Email"></i> 
                            <a href="/download-users-excel/${campaignId}" class="px-4" title="Export Data in Excel">
                                <i class="fas fa-file-excel text-green-500"></i>
                            </a>
                        `;
                }
            } catch (error) {
                console.error(error);
                userListBody.innerHTML = `<tr><td colspan="4" class="text-center py-4 text-red-500">Failed to fetch emails. Please try again later.</td></tr>`;
            }
        }

        // Function to filter users based on search input
        function filterUsers() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            // Filter users based on the search term (matching email)
            const filteredUsers = allUsers.filter(user => 
                user.emailId.toLowerCase().includes(searchTerm)
            );

            // Redisplay users with the filtered list
            displayUsers(filteredUsers);
        }


        // Function to handle form submission
        document.getElementById('emailForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const subject = document.getElementById('subject').value;
            const message = document.getElementById('message').value;
            const bulkCampaignId = document.getElementById('bulkCampaignId');
            const campaignId = bulkCampaignId.getAttribute('data-campaign-id');

            try {
                // Send bulk emails by calling the send-email route
                const response = await fetch('/send-email', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        campaignId, // Use the campaignId set when opening the modal
                        subject,
                        message
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    alert('Emails sent successfully!');
                } else {
                    alert('Error: ' + data.message);
                }
            } catch (error) {
                console.error('Error sending emails:', error);
                alert('Failed to send emails.');
            }

            // Close the modal after sending the emails
            closeModal('emailModal');
        });

        async function fetchCampaigns(purpose) {
            try {
                const response = await fetch('/campaigns');
                const campaigns = await response.json();

                let campaignDropdown;

                // Based on the purpose, decide which dropdown to render
                if (purpose === 'createUser') {
                    campaignDropdown = document.getElementById('campaignIdForCreateUser'); // Dropdown for creating user
                } else if (purpose === 'filterUsers') {
                    campaignDropdown = document.getElementById('campaignIdForFilterUsers'); // Dropdown for filtering users
                } else if (purpose === 'uploadUsers') {
                    campaignDropdown = document.getElementById('campaignIdForUpload'); // Dropdown for upload users
                }

                // Clear the previous options (if any)
                campaignDropdown.innerHTML = '';

                const defaultOption = document.createElement('option');
                defaultOption.value = '';
                defaultOption.textContent = 'Select a campaign';
                campaignDropdown.appendChild(defaultOption);

                // Populate the dropdown with campaigns
                campaigns.forEach(campaign => {
                    const option = document.createElement('option');
                    option.value = campaign._id;
                    option.textContent = campaign.name;
                    campaignDropdown.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching campaigns:', error);
            }
        }

        async function submitCampaign() {
            const campaignName = document.getElementById('createCampaignName').value.trim();
            const campaignError = document.getElementById('campaignError');
            campaignError.textContent = ''; // Clear previous error messages

            // Basic validation to check if the campaign name is provided
            if (!campaignName) {
                campaignError.textContent = 'Campaign name is required.';
                return;
            }

            try {
                const response = await fetch('/createCampaign', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ name: campaignName }),
                });

                const data = await response.json();

                if (response.ok) {
                    // Success: Handle the created campaign (e.g., display a success message or refresh the list)
                    alert('Campaign created successfully!');
                    closeModal('createCampaignModal');
                    // Optionally, refresh the list of campaigns or reset the form
                    document.getElementById('createCampaignName').value = '';
                } else {
                    // Error: Display the error message from the server
                    campaignError.textContent = data.message || 'An error occurred.';
                }
            } catch (error) {
                // Handle network or other errors
                console.error('Error creating campaign:', error);
                campaignError.textContent = 'An unexpected error occurred.';
            }
        }

        // Function to display users on the screen
        function displayUsers(users) {
            const userListBody = document.getElementById('userList');
            userListBody.innerHTML = ''; // Clear previous content

            // Loop through each user
            users.forEach((user, index) => {
                const row = document.createElement('tr');
                row.setAttribute('data-user-id', user._id);
                row.onclick = () => viewUserDetails(user._id);
                row.classList.add("cursor-pointer")
                row.innerHTML = `
            <td class="border px-4 py-2">${index + 1}</td>
            <td class="border px-4 py-2">${user._id}</td>
            <td class="border px-4 py-2">${user.emailId}</td>
            <td class="border px-4 py-2 flex flex-row justify-center">
                <button class="${user.reportedSpam ? " bg-red-500 hover:bg-red-700" : "bg-green-500 hover:bg-green-700"} text-wrap text-white font-bold py-2 px-4 rounded mr-2" onclick="handleAction('${user._id}', '${user.reportedSpam ? 'false' : 'true'}'); event.stopPropagation();">
                    ${user.reportedSpam ? '<i class="fa-regular fa-circle-xmark mr-2" ></i>No' : '<i class="fa-solid fa-check mr-2"></i> Yes'}
                </button>
            </td>
        `;
                userListBody.appendChild(row);
            });
        }

        function viewUserDetails(userId) {
            const url = `/user/viewDetails/${userId}`;
            window.location.href = url;
        }


        // Function to handle accept action
        async function handleAction(userId, action) {
            try {
                const response = await fetch(`/accept-report/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ action })
                });
                if (response.ok) {
                    console.log(`Action "${action}" performed for user ID: ${userId}`);
                    fetchUserEmails(); // Refresh the user list after performing the action
                } else {
                    console.error(`Failed to perform action "${action}" for user ID: ${userId}`);
                }
            } catch (error) {
                console.error(`Error while performing action "${action}" for user ID: ${userId}`, error);
            }
        }

        window.onload = function () {
            // Load campaigns in dropdown for filtering users
            fetchCampaigns('filterUsers');
        };

        function openModal(modalType) {
            if (modalType === 'modal') {
                fetchCampaigns("createUser");
                document.getElementById('modal').classList.remove('hidden');
            } else if (modalType === 'uploadModal') {
                fetchCampaigns("uploadUsers");
                document.getElementById('uploadModal').classList.remove('hidden');
            } else if (modalType === 'createCampaignModal') {
                document.getElementById('createCampaignModal').classList.remove('hidden');
            } else if (modalType === 'emailModal') {
                document.getElementById('emailModal').classList.remove('hidden');
            }
        }

        function closeModal(modalType) {
            if (modalType === 'modal') {
                document.getElementById('modal').classList.add('hidden');
            } else if (modalType === 'uploadModal') {
                document.getElementById('uploadModal').classList.add('hidden');
            } else if (modalType === 'createCampaignModal') {
                document.getElementById('createCampaignModal').classList.add('hidden');
            } else if (modalType === 'emailModal') {
                document.getElementById('emailModal').classList.add('hidden');
            }
        }

        function clearMessageAfterDelay(delay = 5000) {
            setTimeout(() => {
                const messageToSend = document.getElementById('message');
                messageToSend.innerHTML = '';
                messageToSend.classList.remove("text-green-500", "text-red-500");
            }, delay); // delay in milliseconds (5000 ms = 5 seconds)
        }

        async function addUser() {
            const emailId = document.getElementById('emailId').value;
            const campaignId = document.getElementById('campaignIdForCreateUser').value;
            const messageToSend = document.getElementById('message');

            if (!campaignId) {
                document.getElementById('modalError').innerText = 'Please select a campaign';
                return;
            }

            try {
                const response = await fetch('/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ emailId, campaignId })
                });

                const data = await response.json();

                if (response.ok) {
                    closeModal('modal');
                    messageToSend.classList.add("text-green-500");
                    messageToSend.innerHTML = "User added successfully";
                    fetchUserEmails(); // Refresh the user list after adding a user
                } else {
                    messageToSend.classList.add("text-red-500");
                    messageToSend.innerHTML = data.message;
                }
            } catch (error) {
                document.getElementById('modalError').innerText = 'Error adding user. Please try again.';
                console.error('Error adding user:', error);
            }

            // Clear message after a few seconds
            clearMessageAfterDelay();
        }

        document.getElementById('uploadForm').addEventListener('submit', async (event) => {
            event.preventDefault(); // Prevent default form submission

            const fileInput = event.target.file.files[0];
            const campaignId = document.getElementById('campaignIdForUpload').value;

            if (!fileInput || !campaignId) {
                alert('Please select a file and campaign.');
                return;
            }

            const formData = new FormData();
            formData.append('file', fileInput);
            formData.append('campaignId', campaignId); // Add campaignId to FormData

            try {
                // Log FormData contents for debugging
                for (const [key, value] of formData.entries()) {
                    console.log(`${key}: ${value}`);
                }

                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const data = await response.json();
                    alert(data.message);
                    console.log(data.users); // Log the created users to the console
                    closeModal('uploadModal'); // Close modal on success
                } else {
                    alert('Failed to upload file');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred');
            }
        });

    </script>
    <script src="../isSignin.js"></script>
</body>

</html>